// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model hotel {
  id Int @id @default(autoincrement())
  name String
  address String
  roomsCleaningRate Float
  roomsRefreshRate Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  employees employee[]
  houseKeepingRecords daily_housekeeping_record[]
  currentUsers user[]
  services hotel_service[]
}

model employee {
  id Int @id @default(autoincrement())
  firstName String // Vorname
  middleName String @default("") //Zweiter Vorname
  lastName String // Name
  birthdate DateTime @db.Date // Geburtsdatum
  gender gender // Geschlecht
  religion String @default("") // Konfession
  civilStatus String // Zivilstand
  nationality String @default("") // Nationalit채t
  children Json @default("[]") // Kinder 
  mobileNumber String @default("") // Mobile
  telephoneNumber String @default("") // Telefon
  email String @default("")
  address String // Addresse
  emergencyContactName String @default("") // Notfallkontakt Name
  emergencyContactNumber String @default("") // Notfallkontakt Telefon
  healthInsurance String @default("") // Krankenkasse
  AHVNumber String @default("")
  bankAccount String @default("")
  iban String @default("")
  hiredDate DateTime? @db.Date
  rateType String @default("")
  rate Float @default(0)
  status employee_status
  position String @default("")
  activity String @default("") // T채tigkeit
  job String @default("") // Besch채ftigung
  profession String @default("") // Beruf
  language String @default("") // Sprache
  workPermit String @default("") // Arbeitsbewilligung
  workValidUntil DateTime? // G체ltig bis
  shareableUrl String? @unique
  urlExpiryDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user user?
  hotelId Int  // Employee belongs to a single hotel
  workLog employee_work_log[]
  hotel hotel @relation(fields: [hotelId], references: [id])
}

model employee_work_log {
  id Int @id @default(autoincrement())
  employeeId Int
  checkInDate DateTime
  checkOutDate DateTime?
  totalSeconds Int?
  employee employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  breaks employee_break_log[]
}

model employee_break_log {
  id Int @id @default(autoincrement())
  workLogId Int
  breakStartDate DateTime
  breakEndDate DateTime?
  totalSeconds Int?
  workLog employee_work_log @relation(fields: [workLogId], references: [id], onDelete: Cascade)
}

enum employee_status {
  checked_in
  checked_out
  on_break
  absent
  day_off
}

enum gender {
  male
  female
}

enum user_role {
  agnos_admin
  hsk_manager
  hsk_staff
  hotel_manager
}

model user {
  id Int @id @default(autoincrement())
  employeeId Int? @unique
  username String @unique
  password String
  role user_role
  currentHotelId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  employee employee? @relation(fields: [employeeId], references: [id])
  currentHotel hotel? @relation(fields: [currentHotelId], references: [id])
  housekeepingRecordApproved daily_housekeeping_record[]
}

model daily_housekeeping_record {
  id  Int @id @default(autoincrement())
  hotelId Int
  approvedById Int?
  approvedDate DateTime?
  date         DateTime @db.Date @unique
  occupancyPercentage Float
  numberOfRoomNights  Int

  // Cleaned Rooms Fields
  departureRooms    Int
  stayOverRooms    Int
  dirtyRoomsLastDay  Int
  dayUseRooms     Int
  extraCleaningRooms  Int

  // Other Entry Fields
  noServiceRooms    Int
  lateCheckoutRooms  Int
  refreshRooms     Int
  roomsCarryOver    Int

  // Auto Calculated Fields
  totalCleanedRooms    Int @default(0)
  totalRefreshRooms    Int @default(0)
  totalHousekeepingManagerCost Decimal @db.Decimal(10,2) @default(0)
  totalHousekeepingCleanerCost Decimal @db.Decimal(10,2) @default(0)
  totalCleanedRoomsCost Decimal @db.Decimal(10,2) @default(0) // hotel clean rate * cleaned rooms
  totalRefreshRoomsCost Decimal @db.Decimal(10,2) @default(0) // hotel refresh rate * refresh rooms

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  services       service_entry[]
  hotel hotel @relation(fields: [hotelId], references: [id])
  approvedBy user? @relation(fields: [approvedById], references: [id])
}

model service {
  id Int @id @default(autoincrement())
  name String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  hotelServices hotel_service[]
}

model hotel_service {
  id Int @id @default(autoincrement())
  serviceId Int
  hotelId Int
  serviceRate Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  service service @relation(fields: [serviceId], references: [id])
  hotel hotel @relation(fields: [hotelId], references: [id])
  serviceEntries service_entry[]

  @@unique([serviceId, hotelId])
}

model service_entry {
  id Int @id @default(autoincrement())
  dailyRecordId Int
  hotelServiceId Int?
  serviceName String
  totalCost  Decimal @db.Decimal(10,2) @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  dailyRecord  daily_housekeeping_record @relation(fields: [dailyRecordId], references: [id], onDelete: Cascade)
  hotelService hotel_service? @relation(fields: [hotelServiceId], references: [id])
}
